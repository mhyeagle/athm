// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: creativeinfo.proto

#ifndef PROTOBUF_creativeinfo_2eproto__INCLUDED
#define PROTOBUF_creativeinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ad {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_creativeinfo_2eproto();
void protobuf_AssignDesc_creativeinfo_2eproto();
void protobuf_ShutdownFile_creativeinfo_2eproto();

class Creative;
class CreativeInfo;

// ===================================================================

class Creative : public ::google::protobuf::Message {
 public:
  Creative();
  virtual ~Creative();

  Creative(const Creative& from);

  inline Creative& operator=(const Creative& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Creative& default_instance();

  void Swap(Creative* other);

  // implements Message ----------------------------------------------

  Creative* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Creative& from);
  void MergeFrom(const Creative& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required bytes info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:ad.Creative)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_creativeinfo_2eproto();
  friend void protobuf_AssignDesc_creativeinfo_2eproto();
  friend void protobuf_ShutdownFile_creativeinfo_2eproto();

  void InitAsDefaultInstance();
  static Creative* default_instance_;
};
// -------------------------------------------------------------------

class CreativeInfo : public ::google::protobuf::Message {
 public:
  CreativeInfo();
  virtual ~CreativeInfo();

  CreativeInfo(const CreativeInfo& from);

  inline CreativeInfo& operator=(const CreativeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreativeInfo& default_instance();

  void Swap(CreativeInfo* other);

  // implements Message ----------------------------------------------

  CreativeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreativeInfo& from);
  void MergeFrom(const CreativeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ad.Creative creative = 1;
  inline int creative_size() const;
  inline void clear_creative();
  static const int kCreativeFieldNumber = 1;
  inline const ::ad::Creative& creative(int index) const;
  inline ::ad::Creative* mutable_creative(int index);
  inline ::ad::Creative* add_creative();
  inline const ::google::protobuf::RepeatedPtrField< ::ad::Creative >&
      creative() const;
  inline ::google::protobuf::RepeatedPtrField< ::ad::Creative >*
      mutable_creative();

  // @@protoc_insertion_point(class_scope:ad.CreativeInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ad::Creative > creative_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_creativeinfo_2eproto();
  friend void protobuf_AssignDesc_creativeinfo_2eproto();
  friend void protobuf_ShutdownFile_creativeinfo_2eproto();

  void InitAsDefaultInstance();
  static CreativeInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Creative

// required bytes id = 1;
inline bool Creative::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Creative::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Creative::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Creative::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Creative::id() const {
  return *id_;
}
inline void Creative::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Creative::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Creative::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Creative::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Creative::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Creative::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes info = 2;
inline bool Creative::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Creative::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Creative::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Creative::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& Creative::info() const {
  return *info_;
}
inline void Creative::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Creative::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Creative::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Creative::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* Creative::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Creative::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreativeInfo

// repeated .ad.Creative creative = 1;
inline int CreativeInfo::creative_size() const {
  return creative_.size();
}
inline void CreativeInfo::clear_creative() {
  creative_.Clear();
}
inline const ::ad::Creative& CreativeInfo::creative(int index) const {
  return creative_.Get(index);
}
inline ::ad::Creative* CreativeInfo::mutable_creative(int index) {
  return creative_.Mutable(index);
}
inline ::ad::Creative* CreativeInfo::add_creative() {
  return creative_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ad::Creative >&
CreativeInfo::creative() const {
  return creative_;
}
inline ::google::protobuf::RepeatedPtrField< ::ad::Creative >*
CreativeInfo::mutable_creative() {
  return &creative_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_creativeinfo_2eproto__INCLUDED
